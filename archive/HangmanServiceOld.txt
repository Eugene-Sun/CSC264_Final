import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

public class HangmanService 
{
    //Local Constants

    // See: http://jbauman.com/aboutgsl.html - text file the hangman game uses to select a word
    // for the user to guess
    private static final String DICTIONARY_FILE = "gsl.txt";
    // private static final String DICTIONARY_FILE = "dictionary.txt";
    // for a ridiculously large dictionary use "dictionary.txt"
    
    // minimum length of a word to consider
    private static final int MIN_WORD_LENGTH = 3;
    
    // largest number of misses allowed to be set
    private static final int MAX_MISSES = 26;

    //Local Variables

    public ArrayList<String> wordList = new ArrayList<String>();

    public HangmanEntity hangmanEntity;

    //
    public HangmanService(HangmanEntity he) 
    {
        loadDictionary();

        this.hangmanEntity = he;
    }
    
    public String[] getLevel() 
    {
        return null;
    }

    public void initializeHE() {
        hangmanEntity.setLiveCount(7);
        hangmanEntity.setUserInputStr("");
        hangmanEntity.setGameOverFlag(false);
    }

    public String getNextWord(String level) 
    {
        //Local Constants

        //Local Variables
        int minLength = 3;
        int maxLength;
        ArrayList<String> tempWordList = new ArrayList<String>(); //
        Random random = new Random();

        /******************************** */

        //set the minLength and maxLength based on the level
        // switch (level) {
        //     case "EASY":
                
        //         break;
        //     case "MEDIUM":

        //         break;
        //     case "HARD":
                
        //         break;
        // }

        //get words from word list whose length is between the minLength and maxLength
        // for (int i = 0; i < wordList.size(); i++) 
        // {

        // }

        // pick the next word from the tempWordsList
        // note: random.nextInt(n) returns an int between 0 and n-1
        String theWord = wordList.get(random.nextInt(wordList.size()));
        hangmanEntity.setWord(theWord);
        return theWord;
    }

    /**
     * Show the list of guessed letters that were not found in the word.
     * 
     * @param theWord the word being guessed
     * @param letters the ArrayList of characters guessed so far
     */
    public void showGuessed() {
        String theWord = hangmanEntity.getWord();

        ArrayList<Character> letters = hangmanEntity.getUserInputList();
        
        System.out.print("Guessed: ");
        for (int i = 0; i<letters.size(); i++) {
            if (theWord.indexOf(letters.get(i)) == -1) {
                System.out.print(letters.get(i) + " ");
            }
        }
        System.out.println();
    }

       /**
     * return a String with the characters not in the list of characters
     * replaced with _ characters.
     * 
     * @param word the word to be masked
     * @param letters the ArrayList of characters to be revealed
     * @return the word with all characters not in letters replaced by _'s
     */
    public String maskWord() {
        String word = hangmanEntity.getWord();
        ArrayList<Character> letters = hangmanEntity.getUserInputList();

        String answer = "";
        for (int i = 0; i<word.length(); i++) {

            if (letters.contains(word.charAt(i))) {
                answer = answer + word.charAt(i);
            }
            else {
                answer = answer + "_";
            }
        }
        return answer;
    }

    /**********************************************************
    * Method Name : loadDictionary
    * Author : Eugene Sun
    * Date : 2023.04.04
    * Course/Section : CSC 264-301
    * Method Description: This method 
    *

    **********************************************************/
    private void loadDictionary() 
    {
        //Local Constants

        //Local Variables
        // read in the data from the dictionary to an ArrayList
        ArrayList<String> words = new ArrayList<String>();
        
        // first, open the file and create a Scanner to read it in
        Scanner wordScan = null;

        /******************************** */
        
        try {
            wordScan = new Scanner(new File(DICTIONARY_FILE));
        }
        catch (FileNotFoundException e) {
            System.err.println(e);
            System.exit(1);
        }
        
        // read the contents of the file one word at a time, skipping
        // over words that are too short for use by hangman.
        while (wordScan.hasNext()) {
            String nextWord = wordScan.next();
            if (nextWord.length() >= MIN_WORD_LENGTH) {
                words.add(nextWord);
            }
        }

        // store the words array
        this.wordList = words;

    } // End loadDictionary

    /**
     * check whether the user input is a previously inputted character
     * @param input
     * @return
     */
    public boolean isRepeatInput(char input) {
        ArrayList<Character> guessed = hangmanEntity.getUserInputList();

        if (guessed.contains(input)) {
            System.out.println("You already guessed that!");
            return false;
        } else {
            return true;
        }
    }
    /**********************************************************
    * Method Name : guess
    * Author : Eugene Sun
    * Date : 2023.04.04
    * Course/Section : CSC 264-301
    * Method Description: This method checks the following conditions:
    *   1. whether the user input is a matching character in the word
    *   2. whether the user input is a non-matching character in the word
    *
    *   guess
    *   
    *   END guess
    **********************************************************/
    public boolean guess(char input) 
    {
        boolean wordOver = false;

        String theWord = hangmanEntity.getWord();
        int liveCount = hangmanEntity.getLiveCount();
        // is the first letter of the response in the word?
        if (theWord.indexOf(input) == -1) {
            // not in the word
            System.out.println("The letter " + input + " is not in the word.");
            liveCount--;
            hangmanEntity.setLiveCount(liveCount);            hangmanEntity.appendUserInput(input);
            // missesLeft--;
            if (liveCount == 0) {
                System.out.println("Game over! The word was: " + theWord);
                hangmanEntity.setGameOverFlag(true);
                wordOver = true;
            }
        }
        else {
            hangmanEntity.appendUserInput(input);
            // it is in the word
            String maskWord = maskWord();
            if (theWord.equals(maskWord)) {
                System.out.println("Congrats - you guessed the whole word!.");
                System.out.println("You got it!  The word was: " + theWord);
                hangmanEntity.setGameOverFlag(true);
                wordOver = true;
            }
        }
        return wordOver;
    } // End guess
}
